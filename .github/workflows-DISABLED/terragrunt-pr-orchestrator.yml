name: GitHub Organization PR Orchestrator

on:
  pull_request:
    paths:
      - 'live/**'
      - '_common/**'
      - 'root.hcl'

jobs:
  get-env:
    name: 📋 Setup Common ENV
    uses: ./.github/workflows/common-env.yml
  detect-changes:
    name: 🔍 Detect Resource Changes
    runs-on: ubuntu-latest
    needs: get-env
    outputs:
      has-org-settings: ${{ steps.detect.outputs.has-org-settings }}
      has-members: ${{ steps.detect.outputs.has-members }}
      has-teams: ${{ steps.detect.outputs.has-teams }}
      has-repositories: ${{ steps.detect.outputs.has-repositories }}
      org-settings-dirs: ${{ steps.detect.outputs.org-settings-dirs }}
      members-dirs: ${{ steps.detect.outputs.members-dirs }}
      teams-dirs: ${{ steps.detect.outputs.teams-dirs }}
      repositories-dirs: ${{ steps.detect.outputs.repositories-dirs }}
      needs-orchestration: ${{ steps.detect.outputs.needs-orchestration }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect resource changes
        id: detect
        run: |
          set -e

          # Fetch the main branch for comparison
          git fetch origin main

          # Get all changed files
          changed_files=$(git diff --name-only origin/main ${{ github.sha }} || true)

          echo "Changed files:"
          echo "$changed_files"

          # Initialize detection flags
          has_org_settings=false
          has_members=false
          has_teams=false
          has_repositories=false

          # Initialize temporary file lists
          > /tmp/org_settings_files
          > /tmp/members_files
          > /tmp/teams_files
          > /tmp/repositories_files

          # Flags for detection
          has_common_change=false

          # Process each file
          if [[ -n "$changed_files" ]]; then
            while IFS= read -r file; do
              [[ -z "$file" ]] && continue
              echo "Processing file: $file"

              case "$file" in
                live/org/*)
                  echo "  -> Detected org-settings change"
                  echo "$file" >> /tmp/org_settings_files
                  ;;
                live/org.hcl)
                  echo "  -> Detected org-settings change (org config)"
                  echo "$file" >> /tmp/org_settings_files
                  ;;
                live/members/*)
                  echo "  -> Detected members change"
                  echo "$file" >> /tmp/members_files
                  ;;
                live/teams/*)
                  echo "  -> Detected teams change"
                  echo "$file" >> /tmp/teams_files
                  ;;
                live/repositories/*)
                  echo "  -> Detected repositories change"
                  echo "$file" >> /tmp/repositories_files
                  ;;
                _common/*|root.hcl|live/org.hcl)
                  echo "  -> Detected common file change - affects all resources"
                  has_common_change=true
                  ;;
                *)
                  echo "  -> No match for resource detection"
                  ;;
              esac
            done <<< "$changed_files"
          fi

          # Count resource types
          resource_types=0

          # Check org settings
          if [[ "$has_common_change" == "true" ]] || [[ -s /tmp/org_settings_files ]]; then
            has_org_settings=true
            resource_types=$((resource_types + 1))

            if [[ "$has_common_change" == "true" ]]; then
              # Find actual directories with terragrunt.hcl files
              found_dirs=$(find live/org -name "terragrunt.hcl" -type f 2>/dev/null | xargs dirname | sort -u | tr '\n' ' ' || echo "")
              if [[ -n "$found_dirs" ]]; then
                org_settings_dirs="["
                first=true
                for dir in $found_dirs; do
                  if [[ "$first" == "true" ]]; then
                    first=false
                  else
                    org_settings_dirs+=","
                  fi
                  org_settings_dirs+="\"$dir\""
                done
                org_settings_dirs+="]"
              else
                org_settings_dirs="[]"
              fi
            else
              # Build JSON array from unique directories
              dirs=$(cat /tmp/org_settings_files | xargs -r -I {} dirname {} | sort -u | tr '\n' ' ')
              if [[ -n "$dirs" ]]; then
                org_settings_dirs="["
                first=true
                for dir in $dirs; do
                  if [[ "$first" == "true" ]]; then
                    first=false
                  else
                    org_settings_dirs+=","
                  fi
                  org_settings_dirs+="\"$dir\""
                done
                org_settings_dirs+="]"
              else
                org_settings_dirs="[]"
              fi
            fi
          else
            org_settings_dirs="[]"
          fi

          # Check members
          if [[ "$has_common_change" == "true" ]] || [[ -s /tmp/members_files ]]; then
            has_members=true
            resource_types=$((resource_types + 1))

            if [[ "$has_common_change" == "true" ]]; then
              # Find actual directories with terragrunt.hcl files
              found_dirs=$(find live/members -name "terragrunt.hcl" -type f 2>/dev/null | xargs dirname | sort -u | tr '\n' ' ' || echo "")
              if [[ -n "$found_dirs" ]]; then
                members_dirs="["
                first=true
                for dir in $found_dirs; do
                  if [[ "$first" == "true" ]]; then
                    first=false
                  else
                    members_dirs+=","
                  fi
                  members_dirs+="\"$dir\""
                done
                members_dirs+="]"
              else
                members_dirs="[]"
              fi
            else
              dirs=$(cat /tmp/members_files | xargs -r -I {} dirname {} | sort -u | tr '\n' ' ')
              if [[ -n "$dirs" ]]; then
                members_dirs="["
                first=true
                for dir in $dirs; do
                  if [[ "$first" == "true" ]]; then
                    first=false
                  else
                    members_dirs+=","
                  fi
                  members_dirs+="\"$dir\""
                done
                members_dirs+="]"
              else
                members_dirs="[]"
              fi
            fi
          else
            members_dirs="[]"
          fi

          # Check teams
          if [[ "$has_common_change" == "true" ]] || [[ -s /tmp/teams_files ]]; then
            has_teams=true
            resource_types=$((resource_types + 1))

            if [[ "$has_common_change" == "true" ]]; then
              # Find actual team directories with terragrunt.hcl files
              found_dirs=$(find live/teams/* -name "terragrunt.hcl" -type f 2>/dev/null | xargs dirname | sort -u | tr '\n' ' ' || echo "")
              if [[ -n "$found_dirs" ]]; then
                teams_dirs="["
                first=true
                for dir in $found_dirs; do
                  if [[ "$first" == "true" ]]; then
                    first=false
                  else
                    teams_dirs+=","
                  fi
                  teams_dirs+="\"$dir\""
                done
                teams_dirs+="]"
              else
                teams_dirs="[]"
              fi
            else
              dirs=$(cat /tmp/teams_files | xargs -r -I {} dirname {} | sort -u | tr '\n' ' ')
              if [[ -n "$dirs" ]]; then
                teams_dirs="["
                first=true
                for dir in $dirs; do
                  if [[ "$first" == "true" ]]; then
                    first=false
                  else
                    teams_dirs+=","
                  fi
                  teams_dirs+="\"$dir\""
                done
                teams_dirs+="]"
              else
                teams_dirs="[]"
              fi
            fi
          else
            teams_dirs="[]"
          fi

          # Check repositories
          if [[ "$has_common_change" == "true" ]] || [[ -s /tmp/repositories_files ]]; then
            has_repositories=true
            resource_types=$((resource_types + 1))

            if [[ "$has_common_change" == "true" ]]; then
              # Find actual repository directories with terragrunt.hcl files
              found_dirs=$(find live/repositories/* -name "terragrunt.hcl" -type f 2>/dev/null | xargs dirname | sort -u | tr '\n' ' ' || echo "")
              if [[ -n "$found_dirs" ]]; then
                repositories_dirs="["
                first=true
                for dir in $found_dirs; do
                  if [[ "$first" == "true" ]]; then
                    first=false
                  else
                    repositories_dirs+=","
                  fi
                  repositories_dirs+="\"$dir\""
                done
                repositories_dirs+="]"
              else
                repositories_dirs="[]"
              fi
            else
              dirs=$(cat /tmp/repositories_files | xargs -r -I {} dirname {} | sort -u | tr '\n' ' ')
              if [[ -n "$dirs" ]]; then
                repositories_dirs="["
                first=true
                for dir in $dirs; do
                  if [[ "$first" == "true" ]]; then
                    first=false
                  else
                    repositories_dirs+=","
                  fi
                  repositories_dirs+="\"$dir\""
                done
                repositories_dirs+="]"
              else
                repositories_dirs="[]"
              fi
            fi
          else
            repositories_dirs="[]"
          fi

          # Determine if orchestration is needed (more than one resource type)
          if [[ $resource_types -gt 1 ]]; then
            needs_orchestration="true"
          else
            needs_orchestration="false"
          fi

          # Debug output
          echo "🔍 Detection Summary:"
          echo "  Resource types changed: $resource_types"
          echo "  Needs orchestration: $needs_orchestration"
          echo "  Org settings: $has_org_settings"
          echo "  Members: $has_members"
          echo "  Teams: $has_teams"
          echo "  Repositories: $has_repositories"
          echo "  Common change detected: $has_common_change"

          # Output results
          echo "has-org-settings=$has_org_settings" >> $GITHUB_OUTPUT
          echo "has-members=$has_members" >> $GITHUB_OUTPUT
          echo "has-teams=$has_teams" >> $GITHUB_OUTPUT
          echo "has-repositories=$has_repositories" >> $GITHUB_OUTPUT
          echo "org-settings-dirs=$org_settings_dirs" >> $GITHUB_OUTPUT
          echo "members-dirs=$members_dirs" >> $GITHUB_OUTPUT
          echo "teams-dirs=$teams_dirs" >> $GITHUB_OUTPUT
          echo "repositories-dirs=$repositories_dirs" >> $GITHUB_OUTPUT
          echo "needs-orchestration=$needs_orchestration" >> $GITHUB_OUTPUT

          # Cleanup
          rm -f /tmp/*_files

  validate-org-settings:
    name: 🏢 Validate Org Settings
    needs: detect-changes
    if: needs.detect-changes.outputs.has-org-settings == 'true'
    uses: ./.github/workflows/terragrunt-unified-reusable.yml
    with:
      mode: 'validate'
      resource_type: 'org-settings'
      resource_paths: ${{ needs.detect-changes.outputs.org-settings-dirs }}
      resource_emoji: '🏢'
      requires_approval: false
    secrets:
      ORG_GITHUB_TOKEN: ${{ secrets.ORG_GITHUB_TOKEN }}
      TF_GOOGLE_CREDENTIALS: ${{ secrets.TF_GOOGLE_CREDENTIALS }}

  validate-members:
    name: 👥 Validate Members
    needs: [detect-changes, validate-org-settings]
    if: needs.detect-changes.outputs.has-members == 'true' && (always() && !failure())
    uses: ./.github/workflows/terragrunt-unified-reusable.yml
    with:
      mode: 'validate'
      resource_type: 'members'
      resource_paths: ${{ needs.detect-changes.outputs.members-dirs }}
      resource_emoji: '👥'
      requires_approval: false
    secrets:
      ORG_GITHUB_TOKEN: ${{ secrets.ORG_GITHUB_TOKEN }}
      TF_GOOGLE_CREDENTIALS: ${{ secrets.TF_GOOGLE_CREDENTIALS }}

  validate-teams:
    name: 🏗️ Validate Teams
    needs: [detect-changes, validate-members]
    if: needs.detect-changes.outputs.has-teams == 'true' && (always() && !failure())
    uses: ./.github/workflows/terragrunt-unified-reusable.yml
    with:
      mode: 'validate'
      resource_type: 'teams'
      resource_paths: ${{ needs.detect-changes.outputs.teams-dirs }}
      resource_emoji: '🏗️'
      requires_approval: false
    secrets:
      ORG_GITHUB_TOKEN: ${{ secrets.ORG_GITHUB_TOKEN }}
      TF_GOOGLE_CREDENTIALS: ${{ secrets.TF_GOOGLE_CREDENTIALS }}

  validate-repositories:
    name: 📦 Validate Repositories
    needs: [detect-changes, validate-teams]
    if: needs.detect-changes.outputs.has-repositories == 'true' && (always() && !failure())
    uses: ./.github/workflows/terragrunt-unified-reusable.yml
    with:
      mode: 'validate'
      resource_type: 'repositories'
      resource_paths: ${{ needs.detect-changes.outputs.repositories-dirs }}
      resource_emoji: '📦'
      requires_approval: false
    secrets:
      ORG_GITHUB_TOKEN: ${{ secrets.ORG_GITHUB_TOKEN }}
      TF_GOOGLE_CREDENTIALS: ${{ secrets.TF_GOOGLE_CREDENTIALS }}


  validation-summary:
    name: 📋 Validation Summary
    needs: [detect-changes, validate-org-settings, validate-members, validate-teams, validate-repositories]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate Validation Summary
        id: generate-summary
        run: |
          # Collect job results
          ORG_RESULT="${{ needs.validate-org-settings.result }}"
          MEMBERS_RESULT="${{ needs.validate-members.result }}"
          TEAMS_RESULT="${{ needs.validate-teams.result }}"
          REPOS_RESULT="${{ needs.validate-repositories.result }}"

          # Check which resources have changes
          HAS_ORG="${{ needs.detect-changes.outputs.has-org-settings }}"
          HAS_MEMBERS="${{ needs.detect-changes.outputs.has-members }}"
          HAS_TEAMS="${{ needs.detect-changes.outputs.has-teams }}"
          HAS_REPOS="${{ needs.detect-changes.outputs.has-repositories }}"

          # Determine overall status
          OVERALL_STATUS="success"
          FAILED_JOBS=()
          SUCCESS_JOBS=()
          SKIPPED_JOBS=()

          # Evaluate each job that was supposed to run
          if [ "$HAS_ORG" == "true" ]; then
            if [ "$ORG_RESULT" == "failure" ]; then
              FAILED_JOBS+=("org-settings")
              OVERALL_STATUS="failure"
            elif [ "$ORG_RESULT" == "success" ]; then
              SUCCESS_JOBS+=("org-settings")
            else
              SKIPPED_JOBS+=("org-settings")
            fi
          fi

          if [ "$HAS_MEMBERS" == "true" ]; then
            if [ "$MEMBERS_RESULT" == "failure" ]; then
              FAILED_JOBS+=("members")
              OVERALL_STATUS="failure"
            elif [ "$MEMBERS_RESULT" == "success" ]; then
              SUCCESS_JOBS+=("members")
            else
              SKIPPED_JOBS+=("members")
            fi
          fi

          if [ "$HAS_TEAMS" == "true" ]; then
            if [ "$TEAMS_RESULT" == "failure" ]; then
              FAILED_JOBS+=("teams")
              OVERALL_STATUS="failure"
            elif [ "$TEAMS_RESULT" == "success" ]; then
              SUCCESS_JOBS+=("teams")
            else
              SKIPPED_JOBS+=("teams")
            fi
          fi

          if [ "$HAS_REPOS" == "true" ]; then
            if [ "$REPOS_RESULT" == "failure" ]; then
              FAILED_JOBS+=("repositories")
              OVERALL_STATUS="failure"
            elif [ "$REPOS_RESULT" == "success" ]; then
              SUCCESS_JOBS+=("repositories")
            else
              SKIPPED_JOBS+=("repositories")
            fi
          fi

          # Prepare summary details (matching Deployment Summary format)
          if [ "$OVERALL_STATUS" == "success" ]; then
            STATUS_ICON="✅"
            STATUS_COLOR="🟢"
            STATUS_TEXT="ALL VALIDATIONS PASSED"
          else
            STATUS_ICON="❌"
            STATUS_COLOR="🔴"
            STATUS_TEXT="VALIDATION FAILED"
          fi

          # Generate step summary (matching Deployment Summary format)
          echo "# 🧪 GitHub Organization Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${STATUS_COLOR} **Status: ${STATUS_TEXT}** ${STATUS_ICON}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 📅 Validation Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow:** [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.Orchestrationrun_id }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Show validation results in dependency order
          echo "### 🔄 Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Resource Type | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|------|---------------|--------|--------|" >> $GITHUB_STEP_SUMMARY

          # Check each resource in dependency order
          STEP_NUM=1
          for resource_type in "org-settings" "members" "teams" "repositories"; do
            case "$resource_type" in
              "org-settings")
                HAS_CHANGES="$HAS_ORG"
                RESULT="$ORG_RESULT"
                EMOJI="🏢"
                DISPLAY="Organization Settings"
                ;;
              "members")
                HAS_CHANGES="$HAS_MEMBERS"
                RESULT="$MEMBERS_RESULT"
                EMOJI="👥"
                DISPLAY="Members"
                ;;
              "teams")
                HAS_CHANGES="$HAS_TEAMS"
                RESULT="$TEAMS_RESULT"
                EMOJI="🏗️"
                DISPLAY="Teams"
                ;;
              "repositories")
                HAS_CHANGES="$HAS_REPOS"
                RESULT="$REPOS_RESULT"
                EMOJI="📦"
                DISPLAY="Repositories"
                ;;
            esac

            # Only show resources that have changes
            if [ "$HAS_CHANGES" == "true" ]; then
              if [ "$RESULT" == "success" ]; then
                STATUS_EMOJI="✅"
                STATUS_TEXT="VALIDATED"
              elif [ "$RESULT" == "failure" ]; then
                STATUS_EMOJI="❌"
                STATUS_TEXT="FAILED"
              elif [ "$RESULT" == "skipped" ]; then
                STATUS_EMOJI="⏸️"
                STATUS_TEXT="SKIPPED"
              else
                STATUS_EMOJI="⏸️"
                STATUS_TEXT="NOT RUN"
              fi

              echo "| $STEP_NUM | $EMOJI $DISPLAY | $STATUS_EMOJI $STATUS_TEXT | $RESULT |" >> $GITHUB_STEP_SUMMARY
              STEP_NUM=$((STEP_NUM + 1))
            fi
          done

          # Add summary sections (matching Deployment Summary format)
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$OVERALL_STATUS" == "success" ]; then
            echo "### 🎉 Validation Success" >> $GITHUB_STEP_SUMMARY
            echo "- **✅ All organization changes validated successfully**" >> $GITHUB_STEP_SUMMARY
            echo "- **🔄 Dependency order respected** - Resources validated in correct sequence" >> $GITHUB_STEP_SUMMARY
            echo "- **📊 GitHub organization infrastructure** ready for deployment" >> $GITHUB_STEP_SUMMARY
            echo "- **🔍 Review validation logs** for detailed information about each resource" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 🚨 Validation Failure" >> $GITHUB_STEP_SUMMARY
            echo "- **❌ Orchestrated validation failed** - One or more jobs failed or were skipped" >> $GITHUB_STEP_SUMMARY
            if [ ${#FAILED_JOBS[@]} -gt 0 ]; then
              FAILED_LIST=$(IFS=,; echo "${FAILED_JOBS[*]}")
              echo "- **🚫 Failed jobs:** $FAILED_LIST - Review errors in these resource types" >> $GITHUB_STEP_SUMMARY
            fi
            if [ ${#SKIPPED_JOBS[@]} -gt 0 ]; then
              SKIPPED_LIST=$(IFS=,; echo "${SKIPPED_JOBS[*]}")
              echo "- **⏸️ Skipped jobs:** $SKIPPED_LIST - These jobs were skipped due to failures" >> $GITHUB_STEP_SUMMARY
            fi
            echo "- **🔍 Review workflow logs** for complete error information" >> $GITHUB_STEP_SUMMARY
            echo "- **🔧 Fix configuration issues** and update PR" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Validation Order" >> $GITHUB_STEP_SUMMARY
          echo "Organization resources are validated in dependency order:" >> $GITHUB_STEP_SUMMARY
          echo "1. **🏢 Organization Settings** - Foundation configuration" >> $GITHUB_STEP_SUMMARY
          echo "2. **👥 Members** - User management (depends on organization)" >> $GITHUB_STEP_SUMMARY
          echo "3. **🏗️ Teams** - Team structure (depends on members)" >> $GITHUB_STEP_SUMMARY
          echo "4. **📦 Repositories** - Repository setup (depends on teams)" >> $GITHUB_STEP_SUMMARY

          # Post summary to workflow level using workflow commands
          echo "::notice title=Validation Summary::${STATUS_TEXT} - View step summary for detailed results"

          # Create a condensed summary for workflow annotations
          SUMMARY_TEXT="Validation Status: ${STATUS_TEXT}"
          if [ ${#SUCCESS_JOBS[@]} -gt 0 ]; then
            SUCCESS_LIST=$(IFS=,; echo "${SUCCESS_JOBS[*]}")
            SUMMARY_TEXT="${SUMMARY_TEXT} | Passed: ${SUCCESS_LIST}"
          fi
          if [ ${#FAILED_JOBS[@]} -gt 0 ]; then
            FAILED_LIST=$(IFS=,; echo "${FAILED_JOBS[*]}")
            SUMMARY_TEXT="${SUMMARY_TEXT} | Failed: ${FAILED_LIST}"
          fi
          if [ ${#SKIPPED_JOBS[@]} -gt 0 ]; then
            SKIPPED_LIST=$(IFS=,; echo "${SKIPPED_JOBS[*]}")
            SUMMARY_TEXT="${SUMMARY_TEXT} | Skipped: ${SKIPPED_LIST}"
          fi

          # Set outputs
          echo "overall-status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
          echo "failed-jobs=$(IFS=,; echo "${FAILED_JOBS[*]}")" >> $GITHUB_OUTPUT
          echo "success-jobs=$(IFS=,; echo "${SUCCESS_JOBS[*]}")" >> $GITHUB_OUTPUT
          echo "skipped-jobs=$(IFS=,; echo "${SKIPPED_JOBS[*]}")" >> $GITHUB_OUTPUT

          # Set the workflow title with status
          if [ "$OVERALL_STATUS" == "failure" ]; then
            echo "::error title=Validation Failed::${SUMMARY_TEXT}"
            exit 1
          else
            echo "::notice title=Validation Successful::${SUMMARY_TEXT}"
          fi

      - name: Comment PR with Validation Summary
        uses: actions/github-script@v7
        with:
          script: |
            const overallStatus = '${{ steps.generate-summary.outputs.overall-status }}';
            const failedJobs = '${{ steps.generate-summary.outputs.failed-jobs }}';
            const successJobs = '${{ steps.generate-summary.outputs.success-jobs }}';
            const skippedJobs = '${{ steps.generate-summary.outputs.skipped-jobs }}';
            const sha = '${{ github.sha }}';

            // Determine status styling
            let statusIcon = '';
            let statusColor = '';
            let overallStatusText = '';

            if (overallStatus === 'success') {
              statusIcon = '✅';
              statusColor = '🟢';
              overallStatusText = 'ALL VALIDATIONS PASSED';
            } else {
              statusIcon = '❌';
              statusColor = '🔴';
              overallStatusText = 'VALIDATION FAILED';
            }

            // Build validation results table
            const resourceInfo = {
              'org-settings': { emoji: '🏢', display: 'Organization Settings', result: '${{ needs.validate-org-settings.result }}', hasChanges: '${{ needs.detect-changes.outputs.has-org-settings }}' },
              'members': { emoji: '👥', display: 'Members', result: '${{ needs.validate-members.result }}', hasChanges: '${{ needs.detect-changes.outputs.has-members }}' },
              'teams': { emoji: '🏗️', display: 'Teams', result: '${{ needs.validate-teams.result }}', hasChanges: '${{ needs.detect-changes.outputs.has-teams }}' },
              'repositories': { emoji: '📦', display: 'Repositories', result: '${{ needs.validate-repositories.result }}', hasChanges: '${{ needs.detect-changes.outputs.has-repositories }}' }
            };

            let validationTable = '';
            const validationOrder = ['org-settings', 'members', 'teams', 'repositories'];
            let hasAnyChanges = false;

            // Check if any resources have changes
            for (const resource of validationOrder) {
              if (resourceInfo[resource].hasChanges === 'true') {
                hasAnyChanges = true;
                break;
              }
            }

            if (hasAnyChanges) {
              validationTable = `
            ### 🔄 Validation Results

            | Step | Resource Type | Status | Result |
            |------|---------------|--------|--------|`;

              let stepNum = 1;
              for (const resource of validationOrder) {
                const info = resourceInfo[resource];

                // Only show resources that have changes
                if (info.hasChanges === 'true') {
                  let statusEmoji = '';
                  let statusText = '';

                  if (info.result === 'success') {
                    statusEmoji = '✅';
                    statusText = 'VALIDATED';
                  } else if (info.result === 'failure') {
                    statusEmoji = '❌';
                    statusText = 'FAILED';
                  } else if (info.result === 'skipped') {
                    statusEmoji = '⏸️';
                    statusText = 'SKIPPED';
                  } else {
                    statusEmoji = '⏸️';
                    statusText = 'NOT RUN';
                  }

                  validationTable += `\n| ${stepNum} | ${info.emoji} ${info.display} | ${statusEmoji} ${statusText} | ${info.result} |`;
                  stepNum++;
                }
              }
            } else {
              validationTable = `
            ### ℹ️ No Resource Changes
            No GitHub organization resource changes detected in this PR.`;
            }

            // Build next steps section (matching Deployment Summary format)
            let nextStepsSection = '';
            if (overallStatus === 'success') {
              nextStepsSection = `
            ### 🎉 Validation Success
            - **✅ All organization changes validated successfully**
            - **🔄 Dependency order respected** - Resources validated in correct sequence
            - **📊 GitHub organization infrastructure** ready for deployment
            - **🔀 Merge when ready** - This will trigger automatic deployment in dependency order`;
            } else {
              nextStepsSection = `
            ### 🚨 Validation Failure
            - **❌ Orchestrated validation failed** - One or more jobs failed or were skipped`;

              if (failedJobs) {
                nextStepsSection += `\n            - **🚫 Failed jobs:** ${failedJobs} - Review errors in these resource types`;
              }
              if (skippedJobs) {
                nextStepsSection += `\n            - **⏸️ Skipped jobs:** ${skippedJobs} - These jobs were skipped due to failures`;
              }

              nextStepsSection += `
            - **🔍 Review workflow logs** for complete error information
            - **🔧 Fix configuration issues** and update PR`;
            }

            const comment = `# 🧪 GitHub Organization Validation Summary

            ${statusColor} **Status: ${overallStatusText}** ${statusIcon}

            ## 📅 Validation Information
            - **Commit:** \`${sha}\`
            - **Branch:** \`${{ github.ref_name }}\`
            - **Triggered by:** ${{ github.actor }}
            - **Timestamp:** ${new Date().toUTCString()}
            - **Workflow:** [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ${validationTable}

            ${nextStepsSection}

            ---
            ### 📋 Validation Order
            Organization resources are validated in dependency order:
            1. **🏢 Organization Settings** - Foundation configuration
            2. **👥 Members** - User management (depends on organization)
            3. **🏗️ Teams** - Team structure (depends on members)
            4. **📦 Repositories** - Repository setup (depends on teams)
            `;

            // Find existing orchestration comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const validationComment = comments.data.find(comment => {
              const isBot = comment.user.type === 'Bot';
              const isValidationSummary = comment.body.includes('GitHub Organization Validation Summary');
              return isBot && isValidationSummary;
            });

            if (validationComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: validationComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
